// Created with Corsair v{{ corsair_ver }}
// CSR map file: {{ csr_name }} v{{ csr_ver }}
//
// AXI-Lite to Local Bus bridge
//

module  {{ module_name }} #(
    parameter ADDR_W = {{ config['address_width'].value }},
    parameter DATA_W = {{ config['data_width'].value }},
    parameter STRB_W = DATA_W / 8
)(
    input               clk,
    {% if config['register_reset'].value != 'init_only' %}
    input               rst,
    {% endif %}
    // AXI
    input  [ADDR_W-1:0] AXIL_AWADDR,
    input  [2:0]        AXIL_AWPROT,
    input               AXIL_AWVALID,
    output              AXIL_AWREADY,
    input  [DATA_W-1:0] AXIL_WDATA,
    input  [STRB_W-1:0] AXIL_WSTRB,
    input               AXIL_WVALID,
    output              AXIL_WREADY,
    output [1:0]        AXIL_BRESP,
    output              AXIL_BVALID,
    input               AXIL_BREADY,

    input  [ADDR_W-1:0] AXIL_ARADDR,
    input  [2:0]        AXIL_ARPROT,
    input               AXIL_ARVALID,
    output              AXIL_ARREADY,
    output [DATA_W-1:0] AXIL_RDATA,
    output [1:0]        AXIL_RRESP,
    output              AXIL_RVALID,
    input               AXIL_RREADY,

    // Local Bus
    input               wready,
    output [ADDR_W-1:0] waddr,
    output [DATA_W-1:0] wdata,
    output              wen,
    output [STRB_W-1:0] wstrb,
    input  [DATA_W-1:0] rdata,
    input               rvalid,
    output [ADDR_W-1:0] raddr,
    output              ren
);
    reg [ADDR_W-1:0] waddr_int;
    reg [ADDR_W-1:0] raddr_int;
    reg [DATA_W-1:0] wdata_int;
    reg [STRB_W-1:0] strb_int;
    reg              awflag;
    reg              wflag;
    reg              arflag;

    reg              AXIL_BVALID_int;
    reg [DATA_W-1:0] AXIL_RDATA_int;
    reg              AXIL_RVALID_int;
    
    assign AXIL_AWREADY = ~awflag;
    assign AXIL_WREADY  = ~wflag;
    assign AXIL_BVALID  = AXIL_BVALID_int;
    assign waddr        = waddr_int;
    assign wdata        = wdata_int;
    assign wstrb        = strb_int;
    assign wen          = awflag && wflag;
    
    {% set rst_type = config['register_reset'].value%}
    {%- if rst_type == 'async_pos' or rst_type == 'sync_pos' %}
        {% set rst_active = 1%}
    {%- elif rst_type == 'async_neg' or rst_type == 'sync_neg' %}
        {% set rst_active = 0%}
    {%- endif %}
    always @(posedge clk
    {%- if rst_type == 'async_pos' %} or posedge rst)
    {%- elif rst_type == 'async_neg' %} or negedge rst)
    {%- else -%} ) {%- endif %} begin
        if (rst == 1'b{{ rst_active }}) begin
            waddr_int <= 'd0;
            wdata_int <= 'd0;
            strb_int  <= 'd0;
            awflag    <= 1'b0;
            wflag     <= 1'b0;
        end else begin
            if (AXIL_AWVALID == 1'b1 && awflag == 1'b0) begin
                awflag    <= 1'b1;
                waddr_int <= AXIL_AWADDR;
            end else if (wen == 1'b1 && wready == 1'b1) begin
                awflag    <= 1'b0;
            end

            if (AXIL_WVALID == 1'b1 && wflag == 1'b0) begin
                wflag     <= 1'b1;
                wdata_int <= AXIL_WDATA;
                strb_int  <= AXIL_WSTRB;
            end else if (wen == 1'b1 && wready == 1'b1) begin
                wflag     <= 1'b0;
            end

            if (AXIL_BVALID_int == 1'b1 && AXIL_BREADY == 1'b1) begin
                AXIL_BVALID_int <= 1'b0;
            end else if ((AXIL_WVALID == 1'b1 && awflag == 1'b1) || (AXIL_AWVALID == 1'b1 && wflag == 1'b1) || (wflag == 1'b1 && awflag == 1'b1)) begin
                AXIL_BVALID_int <= wready;
            end
        end
    end

    assign AXIL_ARREADY = ~arflag;
    assign AXIL_RDATA   = AXIL_RDATA_int;
    assign AXIL_RVALID  = AXIL_RVALID_int;
    assign raddr        = raddr_int;
    assign ren          = arflag;
    
    {% set rst_type = config['register_reset'].value%}
    always @(posedge clk
    {%- if rst_type == 'async_pos' %} or posedge rst)
    {%- elif rst_type == 'async_neg' %} or negedge rst)
    {%- else -%} ) {%- endif %} begin
        if (rst == 1'b{{ rst_active }}) begin
            raddr_int       <= 'd0;
            arflag          <= 1'b0;
            AXIL_RDATA_int  <= 'd0;
            AXIL_RVALID_int <= 1'b0;
        end else begin
            if (AXIL_ARVALID == 1'b1 && arflag == 1'b0) begin
                arflag    <= 1'b1;
                raddr_int <= AXIL_ARADDR;
            end else if (AXIL_RVALID_int == 1'b1 && AXIL_RREADY == 1'b1) begin
                arflag    <= 1'b0;
            end

            if (rvalid == 1'b1 && AXIL_RVALID_int == 1'b0) begin
                AXIL_RDATA_int  <= rdata;
                AXIL_RVALID_int <= 1'b1;
            end else if (AXIL_RVALID_int == 1'b1 && AXIL_RREADY == 1'b1) begin
                AXIL_RVALID_int <= 1'b0;
            end
        end
    end

endmodule
