{# MACRO #}
{#- vector range #}
{% macro range(high, low=0) %}
[{{ high }}:{{ low }}]
{%- endmacro %}

{#- literal #}
{% macro literal(val, width=1) %}
    {% if width == 1 %}
1'b{{ val }}
    {%- else %}
{{ width}}'h{{ '%x' % val }}
    {%- endif %}
{%- endmacro %}

{#- 'always' header with reset logic #}
{% macro always_begin(sig='', width=1, init=0) %}
    {% set rst_type = config['register_reset'].value%}
    {% if rst_type == 'init_only' %}
always @(posedge clk) begin
    {% else %}
        {% if rst_type == 'sync_pos' %}
always @(posedge clk) begin
    if (rst) begin
        {% elif rst_type == 'sync_neg' %}
always @(posedge clk) begin
    if (!rst) begin
        {% elif rst_type == 'async_pos' %}
always @(posedge clk or posedge rst) begin
    if (rst) begin
        {% elif rst_type == 'async_neg' %}
always @(posedge clk or negedge rst) begin
    if (!rst) begin
        {% endif %}
        {{ sig }} <= {{ literal(init, width) }};
    {% endif %}
    end else
{%- endmacro %}

{#- 'always' part with write strobes #}
{% macro always_write(sig, reg, bf) %}
    {% if 'w' in bf.access %}
if (lb_wen && (lb_waddr == {{ literal(reg.address, config['address_width'].value) }})) begin
        {% for num, val in bf.byte_strobes.items() %}
        if (lb_wstrb[{{ num }}])
            {{ sig }}{{ range(val['bf_msb'], val['bf_lsb']) }} <= lb_wdata{{ range(val['wdata_msb'], val['wdata_lsb']) }};
        {% endfor %}
    {% endif %}
    end
{%- endmacro %}

{#- signal: csr for rdata bus #}
{% macro sig_csr_rdata(reg) %}
csr_{{ reg.name.lower() }}_rdata
{%- endmacro %}

{#- signal: bitfield port out #}
{% macro sig_bf_port_out(reg, bf) %}
csr_{{ reg.name.lower() }}_{{ bf.name.lower() }}
{%- endmacro %}

{#- signal: bitfield flip-flops for write #}
{% macro sig_bf_ff(reg, bf) %}
csr_{{ reg.name.lower() }}_{{ bf.name.lower() }}_ff
{%- endmacro %}

{#- TEMPLATE NAMESPACE #}
{% set tmp = namespace() %}

{#- TEMPLATE #}
// Created with Corsair v{{ corsair_ver }}
// Register map module v{{ config['version'].value }}

module {{ config['name'].value }} #(
    parameter ADDR_W = {{ config['address_width'].value }},
    parameter DATA_W = {{ config['data_width'].value }},
    parameter STRB_W = DATA_W / 8
)(
    // System
    input clk,
{% if config['register_reset'].value != 'init_only' %}
    input rst,
{% endif %}
{% for reg in rmap %}
    // CSR: {{ reg.name }}
    {% for bf in reg %}
    output {{ range(bf.width - 1) }} {{ sig_bf_port_out(reg, bf) }},
    {% endfor %}
{% endfor %}
    // Local Bus
    input  [ADDR_W-1:0] lb_waddr,
    input  [DATA_W-1:0] lb_wdata,
    input               lb_wen,
    input  [STRB_W-1:0] lb_wstrb,
    output              lb_wready,
    input  [ADDR_W-1:0] lb_raddr,
    input               lb_ren,
    output [DATA_W-1:0] lb_rdata,
    output              lb_rvalid
);

{% for reg in rmap %}
//------------------------------------------------------------------------------
// CSR
// [{{ '0x%x' % reg.address }}] - {{ reg.name }} - {{ reg.description }}
//------------------------------------------------------------------------------
wire {{ range(config['data_width'].value - 1) }} {{ sig_csr_rdata(reg) }};
{# fill unused bits with zeros #}
    {% set tmp.last_bit = 0 %}
    {% for bf in reg %}
        {% if bf.lsb > tmp.last_bit %}
assign {{ sig_csr_rdata(reg) }}{{ range(bf.lsb - 1, tmp.last_bit) }} = {{ literal(0, bf.lsb - tmp.last_bit) }};
        {% endif %}
        {% set tmp.last_bit = bf.msb + 1 %}
    {% endfor %}
    {% if config['data_width'].value - 1 > tmp.last_bit %}
assign {{ sig_csr_rdata(reg) }}{{ range(config['data_width'].value - 1, tmp.last_bit) }} = {{ literal(0, config['data_width'].value - tmp.last_bit) }};
    {% endif %}

{# generate bit fields #}
    {% for bf in reg %}
//---------------------
// Bit field
// {{ reg.name }}[{{ bf.msb }}:{{ bf.lsb }}] - {{ bf.name }} - {{ bf.description }}
// {{ bf.access }}{{ ', ' + ', '.join(bf.modifiers) if bf.modifiers else '' }}
//---------------------
        {% if config['register_reset'].value == 'init_only' %}
reg {{ range( bf.width - 1) }} {{ sig_bf_ff(reg, bf) }} = {{ literal(bf.initial, bf.width) }};
        {% else %}
reg {{ range(bf.width - 1) }} {{ sig_bf_ff(reg, bf) }};
        {% endif %}
assign {{ sig_csr_rdata(reg) }}{{ range(bf.msb, bf.lsb) }} = {{ sig_bf_ff(reg, bf) }};
assign {{ sig_bf_port_out(reg, bf) }} = {{ sig_bf_ff(reg, bf) }};

{{ always_begin(sig=sig_bf_ff(reg, bf), width=bf.width, init=bf.initial
)}} {{ always_write(sig=sig_bf_ff(reg, bf), reg=reg, bf=bf) }}
end

    {% endfor %}
{% endfor %}
//------------------------------------------------------------------------------
// Write ready
//------------------------------------------------------------------------------
assign lb_wready = 1'b1;

//------------------------------------------------------------------------------
// Read address decoder
//------------------------------------------------------------------------------
reg {{ range(config['data_width'].value - 1) }} lb_rdata_ff;
{{ always_begin(sig='lb_rdata_ff', width=config['data_width'].value, init=config['regmap']['read_filler'].value
)}} if (lb_ren) begin
        case (lb_raddr)
{% for reg in rmap %}
            {{ literal(reg.address, config['address_width'].value) }}: lb_rdata_ff <= {{ sig_csr_rdata(reg) }};
{% endfor %}
            default: lb_rdata_ff <= {{ literal(config['regmap']['read_filler'].value, config['data_width'].value) }};
        endcase
    end else begin
        lb_rdata_ff <= {{ literal(config['regmap']['read_filler'].value, config['data_width'].value) }};
    end
end
assign lb_rdata = lb_rdata_ff;

//------------------------------------------------------------------------------
// Read data valid
//------------------------------------------------------------------------------
reg lb_rvalid_ff;
{{ always_begin(sig='lb_rvalid_ff'
)}} if (lb_ren && lb_rvalid) begin
        lb_rvalid_ff <= 1'b0;
    end else if (lb_ren) begin
        lb_rvalid_ff <= 1'b1;
    end
end
assign lb_rvalid = lb_rvalid_ff;

endmodule
